{"ast":null,"code":"var _jsxFileName = \"/Users/naeem/Desktop/ReactTutorial/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport 'rbx/index.css';\nimport { Button, Container, Title } from 'rbx';\nconst schedule = {\n  \"title\": \"CS Courses for 2018-2019\",\n  \"courses\": [{\n    \"id\": \"F101\",\n    \"title\": \"Computer Science: Concepts, Philosophy, and Connections\",\n    \"meets\": \"MWF 11:00-11:50\"\n  }, {\n    \"id\": \"F110\",\n    \"title\": \"Intro Programming for non-majors\",\n    \"meets\": \"MWF 10:00-10:50\"\n  }, {\n    \"id\": \"F111\",\n    \"title\": \"Fundamentals of Computer Programming I\",\n    \"meets\": \"MWF 13:00-13:50\"\n  }, {\n    \"id\": \"W111\",\n    \"title\": \"Fundamentals of Computer Programming I\",\n    \"meets\": \"MWF 11:00-11:50\"\n  }, {\n    \"id\": \"F211\",\n    \"title\": \"Fundamentals of Computer Programming II\",\n    \"meets\": \"TuTh 12:30-13:50\"\n  }]\n}; // a conflict must involve overlapping days and times\n\nconst days = ['M', 'Tu', 'W', 'Th', 'F'];\nconst meetsPat = /^ *((?:M|Tu|W|Th|F)+) +(\\d\\d?):(\\d\\d) *[ -] *(\\d\\d?):(\\d\\d) *$/;\n\nconst daysOverlap = (days1, days2) => days.some(day => days1.includes(day) && days2.includes(day));\n\nconst hoursOverlap = (hours1, hours2) => Math.max(hours1.start, hours2.start) < Math.min(hours1.end, hours2.end);\n\nconst timeConflict = (course1, course2) => daysOverlap(course1.days, course2.days) && hoursOverlap(course1.hours, course2.hours);\n\nconst courseConflict = (course1, course2) => course1 !== course2 && getCourseTerm(course1) === getCourseTerm(course2) && timeConflict(course1, course2);\n\nconst hasConflict = (course, selected) => selected.some(selection => courseConflict(course, selection));\n\nconst Banner = ({\n  title\n}) => /*#__PURE__*/React.createElement(Title, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 3\n  }\n}, title);\n\nconst getCourseTerm = course => terms[course.id.charAt(0)];\n\nconst getCourseNumber = course => course.id.slice(1, 4); // change button color when clicked\n\n\nconst buttonColor = selected => selected ? 'success' : null; // selecting proper fields\n\n\nconst useSelection = () => {\n  const [selected, setSelected] = useState([]);\n\n  const toggle = x => {\n    setSelected(selected.includes(x) ? selected.filter(y => y !== x) : [x].concat(selected));\n  };\n\n  return [selected, toggle];\n}; // get the correct term when button clicked\n\n\nconst TermSelector = ({\n  state\n}) => /*#__PURE__*/React.createElement(Button.Group, {\n  hasAddons: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 3\n  }\n}, Object.values(terms).map(value => /*#__PURE__*/React.createElement(Button, {\n  key: value,\n  color: buttonColor(value === state.term),\n  onClick: () => state.setTerm(value),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }\n}, value)));\n\nconst Course = ({\n  course,\n  state\n}) => /*#__PURE__*/React.createElement(Button, {\n  color: buttonColor(state.selected.includes(course)),\n  onClick: () => state.toggle(course),\n  disabled: hasConflict(course, state.selected),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 3\n  }\n}, getCourseTerm(course), \" CS \", getCourseNumber(course), \": \", course.title); // get all courses based on selected term\n\n\nconst CourseList = ({\n  courses\n}) => {\n  const [term, setTerm] = useState('Fall');\n  const [selected, toggle] = useSelection();\n  const termCourses = courses.filter(course => term === getCourseTerm(course));\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TermSelector, {\n    state: {\n      term,\n      setTerm\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Button.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, termCourses.map(course => /*#__PURE__*/React.createElement(Course, {\n    key: course.id,\n    course: course,\n    state: {\n      selected,\n      toggle\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 12\n    }\n  }))));\n};\n\nconst App = () => {\n  const [schedule, setSchedule] = useState({\n    title: '',\n    courses: []\n  });\n  const url = 'https://courses.cs.northwestern.edu/394/data/cs-courses.php';\n  useEffect(() => {\n    const fetchSchedule = async () => {\n      const response = await fetch(url);\n      if (!response.ok) throw response;\n      const json = await response.json();\n      setSchedule(json);\n    };\n\n    fetchSchedule();\n  }, []);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Banner, {\n    title: schedule.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CourseList, {\n    courses: schedule.courses,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/naeem/Desktop/ReactTutorial/src/App.js"],"names":["React","useState","useEffect","Button","Container","Title","schedule","days","meetsPat","daysOverlap","days1","days2","some","day","includes","hoursOverlap","hours1","hours2","Math","max","start","min","end","timeConflict","course1","course2","hours","courseConflict","getCourseTerm","hasConflict","course","selected","selection","Banner","title","terms","id","charAt","getCourseNumber","slice","buttonColor","useSelection","setSelected","toggle","x","filter","y","concat","TermSelector","state","Object","values","map","value","term","setTerm","Course","CourseList","courses","termCourses","App","setSchedule","url","fetchSchedule","response","fetch","ok","json"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport 'rbx/index.css';\nimport { Button, Container, Title } from 'rbx';\n\nconst schedule = {\n  \"title\": \"CS Courses for 2018-2019\",\n  \"courses\": [\n    {\n      \"id\": \"F101\",\n      \"title\": \"Computer Science: Concepts, Philosophy, and Connections\",\n      \"meets\": \"MWF 11:00-11:50\"\n    },\n    {\n      \"id\": \"F110\",\n      \"title\": \"Intro Programming for non-majors\",\n      \"meets\": \"MWF 10:00-10:50\"\n    },\n    {\n      \"id\": \"F111\",\n      \"title\": \"Fundamentals of Computer Programming I\",\n      \"meets\": \"MWF 13:00-13:50\"\n    },\n    {\n      \"id\": \"W111\",\n      \"title\": \"Fundamentals of Computer Programming I\",\n      \"meets\": \"MWF 11:00-11:50\"\n    },\n    {\n      \"id\": \"F211\",\n      \"title\": \"Fundamentals of Computer Programming II\",\n      \"meets\": \"TuTh 12:30-13:50\"\n    }\n  ]\n};\n\n// a conflict must involve overlapping days and times\nconst days = ['M', 'Tu', 'W', 'Th', 'F'];\n\nconst meetsPat = /^ *((?:M|Tu|W|Th|F)+) +(\\d\\d?):(\\d\\d) *[ -] *(\\d\\d?):(\\d\\d) *$/;\n\nconst daysOverlap = (days1, days2) => (\n  days.some(day => days1.includes(day) && days2.includes(day))\n);\n\nconst hoursOverlap = (hours1, hours2) => (\n  Math.max(hours1.start, hours2.start) < Math.min(hours1.end, hours2.end)\n);\n\nconst timeConflict = (course1, course2) => (\n  daysOverlap(course1.days, course2.days) && hoursOverlap(course1.hours, course2.hours)\n);\n\nconst courseConflict = (course1, course2) => (\n  course1 !== course2\n  && getCourseTerm(course1) === getCourseTerm(course2)\n  && timeConflict(course1, course2)\n);\n\nconst hasConflict = (course, selected) => (\n  selected.some(selection => courseConflict(course, selection))\n);\n\nconst Banner = ({ title }) => (\n  <Title>{ title }</Title>\n);\n\nconst getCourseTerm = course => (\n  terms[course.id.charAt(0)]\n);\n\nconst getCourseNumber = course => (\n  course.id.slice(1, 4)\n)\n\n// change button color when clicked\nconst buttonColor = selected => (\n  selected ? 'success' : null\n);\n\n// selecting proper fields\nconst useSelection = () => {\n  const [selected, setSelected] = useState([]);\n  const toggle = (x) => {\n    setSelected(selected.includes(x) ? selected.filter(y => y !== x) : [x].concat(selected))\n  };\n  return [ selected, toggle ];\n};\n\n// get the correct term when button clicked\nconst TermSelector = ({ state }) => (\n  <Button.Group hasAddons>\n  { Object.values(terms)\n      .map(value =>\n        <Button key={value}\n          color={ buttonColor(value === state.term) }\n          onClick={ () => state.setTerm(value) }\n          >\n          { value }\n        </Button>\n      )\n  }\n  </Button.Group>\n);\n\nconst Course = ({ course, state }) => (\n  <Button color={ buttonColor(state.selected.includes(course)) }\n    onClick={ () => state.toggle(course) }\n    disabled={ hasConflict(course, state.selected) }\n    >\n    { getCourseTerm(course) } CS { getCourseNumber(course) }: { course.title }\n  </Button>\n);\n\n// get all courses based on selected term\nconst CourseList = ({ courses }) => {\n  const [term, setTerm] = useState('Fall');\n  const [selected, toggle] = useSelection();\n  const termCourses = courses.filter(course => term === getCourseTerm(course));\n\n  return (\n    <React.Fragment>\n      <TermSelector state={ { term, setTerm } } />\n      <Button.Group>\n        { termCourses.map(course =>\n           <Course key={ course.id } course={ course }\n             state={ { selected, toggle } } />) }\n      </Button.Group>\n    </React.Fragment>\n  );\n};\n\nconst App = () => {\n  const [schedule, setSchedule] = useState({ title: '', courses: [] });\n  const url = 'https://courses.cs.northwestern.edu/394/data/cs-courses.php';\n\n  useEffect(() => {\n    const fetchSchedule = async () => {\n      const response = await fetch(url);\n      if (!response.ok) throw response;\n      const json = await response.json();\n      setSchedule(json);\n    }\n    fetchSchedule();\n  }, [])\n\n  return (\n    <Container>\n      <Banner title={ schedule.title } />\n      <CourseList courses={ schedule.courses } />\n    </Container>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}